# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/RelativePoseQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class RelativePoseQueryRequest(genpy.Message):
  _md5sum = "a8a7acfe62a5b9d8c880a600aac547e1"
  _type = "omnimapper_msgs/RelativePoseQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time stamp_target
string platform_target
time stamp_source
string platform_source


geometry_msgs/PoseWithCovariance initial_guess


================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['stamp_target','platform_target','stamp_source','platform_source','initial_guess']
  _slot_types = ['time','string','time','string','geometry_msgs/PoseWithCovariance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp_target,platform_target,stamp_source,platform_source,initial_guess

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelativePoseQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.platform_target is None:
        self.platform_target = ''
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.platform_source is None:
        self.platform_source = ''
      if self.initial_guess is None:
        self.initial_guess = geometry_msgs.msg.PoseWithCovariance()
    else:
      self.stamp_target = genpy.Time()
      self.platform_target = ''
      self.stamp_source = genpy.Time()
      self.platform_source = ''
      self.initial_guess = geometry_msgs.msg.PoseWithCovariance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_target.secs, _x.stamp_target.nsecs))
      _x = self.platform_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.initial_guess.pose.position.x, _x.initial_guess.pose.position.y, _x.initial_guess.pose.position.z, _x.initial_guess.pose.orientation.x, _x.initial_guess.pose.orientation.y, _x.initial_guess.pose.orientation.z, _x.initial_guess.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.initial_guess.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.initial_guess is None:
        self.initial_guess = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_target.secs, _x.stamp_target.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_target = str[start:end].decode('utf-8')
      else:
        self.platform_target = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.initial_guess.pose.position.x, _x.initial_guess.pose.position.y, _x.initial_guess.pose.position.z, _x.initial_guess.pose.orientation.x, _x.initial_guess.pose.orientation.y, _x.initial_guess.pose.orientation.z, _x.initial_guess.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.initial_guess.covariance = _get_struct_36d().unpack(str[start:end])
      self.stamp_target.canon()
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_target.secs, _x.stamp_target.nsecs))
      _x = self.platform_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.initial_guess.pose.position.x, _x.initial_guess.pose.position.y, _x.initial_guess.pose.position.z, _x.initial_guess.pose.orientation.x, _x.initial_guess.pose.orientation.y, _x.initial_guess.pose.orientation.z, _x.initial_guess.pose.orientation.w))
      buff.write(self.initial_guess.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.initial_guess is None:
        self.initial_guess = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_target.secs, _x.stamp_target.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_target = str[start:end].decode('utf-8')
      else:
        self.platform_target = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.initial_guess.pose.position.x, _x.initial_guess.pose.position.y, _x.initial_guess.pose.position.z, _x.initial_guess.pose.orientation.x, _x.initial_guess.pose.orientation.y, _x.initial_guess.pose.orientation.z, _x.initial_guess.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.initial_guess.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      self.stamp_target.canon()
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/RelativePoseQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RelativePoseQueryResponse(genpy.Message):
  _md5sum = "213b254c3f16b2780f49894c7b94d3c0"
  _type = "omnimapper_msgs/RelativePoseQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success


geometry_msgs/PoseWithCovariance solution


================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['success','solution']
  _slot_types = ['bool','geometry_msgs/PoseWithCovariance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,solution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelativePoseQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
    else:
      self.success = False
      self.solution = geometry_msgs.msg.PoseWithCovariance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7d().pack(_x.success, _x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.solution.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.success, _x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w,) = _get_struct_B7d().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 288
      self.solution.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7d().pack(_x.success, _x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w))
      buff.write(self.solution.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.success, _x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w,) = _get_struct_B7d().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 288
      self.solution.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_B7d = None
def _get_struct_B7d():
    global _struct_B7d
    if _struct_B7d is None:
        _struct_B7d = struct.Struct("<B7d")
    return _struct_B7d
class RelativePoseQuery(object):
  _type          = 'omnimapper_msgs/RelativePoseQuery'
  _md5sum = '9687cddf88d66de4f9c6287269078d9d'
  _request_class  = RelativePoseQueryRequest
  _response_class = RelativePoseQueryResponse
