# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/LoopCloseGlobalQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class LoopCloseGlobalQueryRequest(genpy.Message):
  _md5sum = "fdc851e6aa8759ff63a17651e5363d0c"
  _type = "omnimapper_msgs/LoopCloseGlobalQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time stamp_source
string platform_source
time[] stamp_targets
string[] platform_targets
"""
  __slots__ = ['stamp_source','platform_source','stamp_targets','platform_targets']
  _slot_types = ['time','string','time[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp_source,platform_source,stamp_targets,platform_targets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopCloseGlobalQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.platform_source is None:
        self.platform_source = ''
      if self.stamp_targets is None:
        self.stamp_targets = []
      if self.platform_targets is None:
        self.platform_targets = []
    else:
      self.stamp_source = genpy.Time()
      self.platform_source = ''
      self.stamp_targets = []
      self.platform_targets = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.stamp_targets is None:
        self.stamp_targets = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.stamp_targets is None:
        self.stamp_targets = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/LoopCloseGlobalQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class LoopCloseGlobalQueryResponse(genpy.Message):
  _md5sum = "2d85ff400114859d9c4dcdb5415d6305"
  _type = "omnimapper_msgs/LoopCloseGlobalQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time[] stamp_targets
string[] platform_targets

float64[] metrics
float64 null_metric

"""
  __slots__ = ['stamp_targets','platform_targets','metrics','null_metric']
  _slot_types = ['time[]','string[]','float64[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp_targets,platform_targets,metrics,null_metric

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopCloseGlobalQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp_targets is None:
        self.stamp_targets = []
      if self.platform_targets is None:
        self.platform_targets = []
      if self.metrics is None:
        self.metrics = []
      if self.null_metric is None:
        self.null_metric = 0.
    else:
      self.stamp_targets = []
      self.platform_targets = []
      self.metrics = []
      self.null_metric = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.metrics)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.metrics))
      buff.write(_get_struct_d().pack(self.null_metric))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp_targets is None:
        self.stamp_targets = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.metrics = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.null_metric,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.metrics)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.metrics.tostring())
      buff.write(_get_struct_d().pack(self.null_metric))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp_targets is None:
        self.stamp_targets = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.metrics = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.null_metric,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class LoopCloseGlobalQuery(object):
  _type          = 'omnimapper_msgs/LoopCloseGlobalQuery'
  _md5sum = 'af77c04ecca6b4cc70c090572926494d'
  _request_class  = LoopCloseGlobalQueryRequest
  _response_class = LoopCloseGlobalQueryResponse
