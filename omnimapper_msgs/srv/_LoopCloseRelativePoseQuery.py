# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/LoopCloseRelativePoseQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class LoopCloseRelativePoseQueryRequest(genpy.Message):
  _md5sum = "b3aac44e9017ef193d98b6f828a06f45"
  _type = "omnimapper_msgs/LoopCloseRelativePoseQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time stamp_source
string platform_source


time[] stamp_targets
string[] platform_targets

geometry_msgs/PoseWithCovariance[] initial_guesses


================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['stamp_source','platform_source','stamp_targets','platform_targets','initial_guesses']
  _slot_types = ['time','string','time[]','string[]','geometry_msgs/PoseWithCovariance[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp_source,platform_source,stamp_targets,platform_targets,initial_guesses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopCloseRelativePoseQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.platform_source is None:
        self.platform_source = ''
      if self.stamp_targets is None:
        self.stamp_targets = []
      if self.platform_targets is None:
        self.platform_targets = []
      if self.initial_guesses is None:
        self.initial_guesses = []
    else:
      self.stamp_source = genpy.Time()
      self.platform_source = ''
      self.stamp_targets = []
      self.platform_targets = []
      self.initial_guesses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.initial_guesses)
      buff.write(_struct_I.pack(length))
      for val1 in self.initial_guesses:
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*val1.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.stamp_targets is None:
        self.stamp_targets = None
      if self.initial_guesses is None:
        self.initial_guesses = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.initial_guesses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseWithCovariance()
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        val1.covariance = _get_struct_36d().unpack(str[start:end])
        self.initial_guesses.append(val1)
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp_source.secs, _x.stamp_source.nsecs))
      _x = self.platform_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.stamp_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.stamp_targets:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.platform_targets)
      buff.write(_struct_I.pack(length))
      for val1 in self.platform_targets:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.initial_guesses)
      buff.write(_struct_I.pack(length))
      for val1 in self.initial_guesses:
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(val1.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp_source is None:
        self.stamp_source = genpy.Time()
      if self.stamp_targets is None:
        self.stamp_targets = None
      if self.initial_guesses is None:
        self.initial_guesses = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp_source.secs, _x.stamp_source.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_source = str[start:end].decode('utf-8')
      else:
        self.platform_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stamp_targets = []
      for i in range(0, length):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.stamp_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.platform_targets = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.platform_targets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.initial_guesses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseWithCovariance()
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        val1.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        self.initial_guesses.append(val1)
      self.stamp_source.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from omnimapper_msgs/LoopCloseRelativePoseQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class LoopCloseRelativePoseQueryResponse(genpy.Message):
  _md5sum = "0365f4f295ecda9c789043a7bd025fa3"
  _type = "omnimapper_msgs/LoopCloseRelativePoseQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success


time stamp_target
string platform_target

geometry_msgs/PoseWithCovariance solution


================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['success','stamp_target','platform_target','solution']
  _slot_types = ['bool','time','string','geometry_msgs/PoseWithCovariance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,stamp_target,platform_target,solution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoopCloseRelativePoseQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.platform_target is None:
        self.platform_target = ''
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
    else:
      self.success = False
      self.stamp_target = genpy.Time()
      self.platform_target = ''
      self.solution = geometry_msgs.msg.PoseWithCovariance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2I().pack(_x.success, _x.stamp_target.secs, _x.stamp_target.nsecs))
      _x = self.platform_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.solution.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.success, _x.stamp_target.secs, _x.stamp_target.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_target = str[start:end].decode('utf-8')
      else:
        self.platform_target = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.solution.covariance = _get_struct_36d().unpack(str[start:end])
      self.stamp_target.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2I().pack(_x.success, _x.stamp_target.secs, _x.stamp_target.nsecs))
      _x = self.platform_target
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w))
      buff.write(self.solution.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp_target is None:
        self.stamp_target = genpy.Time()
      if self.solution is None:
        self.solution = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.success, _x.stamp_target.secs, _x.stamp_target.nsecs,) = _get_struct_B2I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platform_target = str[start:end].decode('utf-8')
      else:
        self.platform_target = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.solution.pose.position.x, _x.solution.pose.position.y, _x.solution.pose.position.z, _x.solution.pose.orientation.x, _x.solution.pose.orientation.y, _x.solution.pose.orientation.z, _x.solution.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.solution.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      self.stamp_target.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
class LoopCloseRelativePoseQuery(object):
  _type          = 'omnimapper_msgs/LoopCloseRelativePoseQuery'
  _md5sum = 'a43d247bd9ef28cfd29003442c0797e7'
  _request_class  = LoopCloseRelativePoseQueryRequest
  _response_class = LoopCloseRelativePoseQueryResponse
